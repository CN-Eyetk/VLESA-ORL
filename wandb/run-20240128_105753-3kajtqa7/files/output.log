/disk/junlin/EmoSp/bart-our/-LIGHT-TRANS4/all_loss0.6_0.2_0.2_kl-lr_2e-05-Emoin-nopp-empp-ensitu-desitu-vae-mvae256-wo_comet-vad124_II
vocab size = 50265
without comet
BartConfig {
  "_name_or_path": "facebook/bart-base",
  "activation_dropout": 0.1,
  "activation_function": "gelu",
  "add_bias_logits": false,
  "add_emo_cross_attn": false,
  "add_final_layer_norm": false,
  "architectures": [
    "BartModel"
  ],
  "attention_dropout": 0.1,
  "bos_token_id": 0,
  "classif_dropout": 0.1,
  "classifier_dropout": 0.0,
  "d_model": 768,
  "decoder_attention_heads": 12,
  "decoder_ffn_dim": 3072,
  "decoder_layerdrop": 0.0,
  "decoder_layers": 6,
  "decoder_start_token_id": 2,
  "dropout": 0.1,
  "early_stopping": true,
  "emo_from_eos": true,
  "emo_from_situ": false,
  "emo_loss_ratio": 0.2,
  "emo_out_loss_ratio": 0.2,
  "emo_use_cat_attn": true,
  "encoder_attention_heads": 12,
  "encoder_ffn_dim": 3072,
  "encoder_layerdrop": 0.0,
  "encoder_layers": 6,
  "eos_token_id": 2,
  "force_bos_token_to_be_generated": false,
  "forced_bos_token_id": 0,
  "forced_eos_token_id": 2,
  "gradient_checkpointing": false,
  "id2label": {
    "0": "LABEL_0",
    "1": "LABEL_1",
    "2": "LABEL_2"
  },
  "init_std": 0.02,
  "intensity_vae": false,
  "is_encoder_decoder": true,
  "label2id": {
    "LABEL_0": 0,
    "LABEL_1": 1,
    "LABEL_2": 2
  },
  "latent_dim": 256,
  "lstm_st_seq": false,
  "max_position_embeddings": 1024,
  "merge": false,
  "mixed_vae": true,
  "model_type": "bart",
  "n_emo_out": 28,
  "no_fuse": true,
  "no_repeat_ngram_size": 3,
  "normalize_before": false,
  "normalize_embedding": true,
  "num_beams": 4,
  "num_hidden_layers": 6,
  "pad_token_id": 1,
  "prepend": false,
  "rl_emb_ratio": 0.6,
  "sample_strat_emb": false,
  "scale_embedding": false,
  "st_from_eos": true,
  "stg_use_cat_attn": true,
  "task_specific_params": {
    "summarization": {
      "length_penalty": 1.0,
      "max_length": 128,
      "min_length": 12,
      "num_beams": 4
    },
    "summarization_cnn": {
      "length_penalty": 2.0,
      "max_length": 142,
      "min_length": 56,
      "num_beams": 4
    },
    "summarization_xsum": {
      "length_penalty": 1.0,
      "max_length": 62,
      "min_length": 11,
      "num_beams": 6
    }
  },
  "torch_dtype": "float32",
  "transformers_version": "4.2.2",
  "use_cache": true,
  "use_copy": false,
  "use_emb_prep": true,
  "use_emo_in_dist": true,
  "use_kl": true,
  "use_role_embed": true,
  "use_situ_in_decoder": true,
  "use_situ_in_encoder": true,
  "use_st_seq": false,
  "use_th_attn": false,
  "use_trans_mat": true,
  "use_vad_labels": true,
  "use_vae": true,
  "vad_emb_ratio": 0.2,
  "vocab_size": 50265,
  "wo_comet": true,
  "wo_emo": false,
  "wo_stra": false
}
Some weights of BartForConditionalGeneration were not initialized from the model checkpoint at facebook/bart-base and are newly initialized: ['encoder.layers.0.attn_layer_norm_comet.weight', 'encoder.layers.0.attn_layer_norm_comet.bias', 'encoder.layers.1.attn_layer_norm_comet.weight', 'encoder.layers.1.attn_layer_norm_comet.bias', 'encoder.layers.2.attn_layer_norm_comet.weight', 'encoder.layers.2.attn_layer_norm_comet.bias', 'encoder.layers.3.attn_layer_norm_comet.weight', 'encoder.layers.3.attn_layer_norm_comet.bias', 'encoder.layers.4.attn_layer_norm_comet.weight', 'encoder.layers.4.attn_layer_norm_comet.bias', 'encoder.layers.5.attn_layer_norm_comet.weight', 'encoder.layers.5.attn_layer_norm_comet.bias', 'encoder.layers.5.muAttn.k_proj.weight', 'encoder.layers.5.muAttn.k_proj.bias', 'encoder.layers.5.muAttn.v_proj.weight', 'encoder.layers.5.muAttn.v_proj.bias', 'encoder.layers.5.muAttn.q_proj.weight', 'encoder.layers.5.muAttn.q_proj.bias', 'encoder.layers.5.muAttn.out_proj.weight', 'encoder.layers.5.muAttn.out_proj.bias', 'encoder.emotion_head.weight', 'encoder.emotion_head.bias', 'encoder.batchNorm_emotion.weight', 'encoder.batchNorm_emotion.bias', 'encoder.batchNorm_emotion.running_mean', 'encoder.batchNorm_emotion.running_var', 'encoder.batchNorm_strategy.weight', 'encoder.batchNorm_strategy.bias', 'encoder.batchNorm_strategy.running_mean', 'encoder.batchNorm_strategy.running_var', 'encoder.strategy_embedding.weight', 'encoder.multi_state_LayerNorm.weight', 'encoder.multi_state_LayerNorm.bias', 'encoder.strategy_head.weight', 'encoder.strategy_head.bias', 'encoder.trans_mat.emotion_embedding.weight', 'encoder.trans_mat.h_prior_emo.weight', 'encoder.trans_mat.h_prior_emo.bias', 'encoder.trans_mat.h_prior_strat.weight', 'encoder.trans_mat.h_prior_strat.bias', 'encoder.trans_mat.mu_prior.weight', 'encoder.trans_mat.mu_prior.bias', 'encoder.trans_mat.logvar_prior.weight', 'encoder.trans_mat.logvar_prior.bias', 'encoder.trans_mat.Dense_z_prior.weight', 'encoder.trans_mat.Dense_z_prior.bias', 'encoder.trans_mat.h_posterior_emo.weight', 'encoder.trans_mat.h_posterior_emo.bias', 'encoder.trans_mat.h_posterior_strat.weight', 'encoder.trans_mat.h_posterior_strat.bias', 'encoder.trans_mat.mu_posterior.weight', 'encoder.trans_mat.mu_posterior.bias', 'encoder.trans_mat.logvar_posterior.weight', 'encoder.trans_mat.logvar_posterior.bias', 'encoder.strat_cat_attn.V', 'encoder.strat_cat_attn.W.weight', 'encoder.emo_cat_attn.V', 'encoder.emo_cat_attn.W.weight', 'decoder.layers.0.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.0.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.0.encoder_attn_layer_norm_comet.weight', 'decoder.layers.0.encoder_attn_layer_norm_comet.bias', 'decoder.layers.0.encoder_attn_layer_norm_total.weight', 'decoder.layers.0.encoder_attn_layer_norm_total.bias', 'decoder.layers.1.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.1.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.1.encoder_attn_layer_norm_comet.weight', 'decoder.layers.1.encoder_attn_layer_norm_comet.bias', 'decoder.layers.1.encoder_attn_layer_norm_total.weight', 'decoder.layers.1.encoder_attn_layer_norm_total.bias', 'decoder.layers.2.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.2.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.2.encoder_attn_layer_norm_comet.weight', 'decoder.layers.2.encoder_attn_layer_norm_comet.bias', 'decoder.layers.2.encoder_attn_layer_norm_total.weight', 'decoder.layers.2.encoder_attn_layer_norm_total.bias', 'decoder.layers.3.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.3.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.3.encoder_attn_layer_norm_comet.weight', 'decoder.layers.3.encoder_attn_layer_norm_comet.bias', 'decoder.layers.3.encoder_attn_layer_norm_total.weight', 'decoder.layers.3.encoder_attn_layer_norm_total.bias', 'decoder.layers.4.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.4.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.4.encoder_attn_layer_norm_comet.weight', 'decoder.layers.4.encoder_attn_layer_norm_comet.bias', 'decoder.layers.4.encoder_attn_layer_norm_total.weight', 'decoder.layers.4.encoder_attn_layer_norm_total.bias', 'decoder.layers.5.encoder_attn_layer_norm_strategy.weight', 'decoder.layers.5.encoder_attn_layer_norm_strategy.bias', 'decoder.layers.5.encoder_attn_layer_norm_comet.weight', 'decoder.layers.5.encoder_attn_layer_norm_comet.bias', 'decoder.layers.5.encoder_attn_layer_norm_total.weight', 'decoder.layers.5.encoder_attn_layer_norm_total.bias', 'fuse_st_emo.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|▍                                                                                                        | 2/510 [00:01<06:42,  1.26it/s]
args.local_rank =  -1
162,803,592 total parameters.
162,803,592 training parameters.
labels tensor([6, 0, 5, 2, 5, 0, 1, 0, 3, 6, 0, 2, 5, 3, 1, 5, 0, 2, 4, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0000, -2.9799, -3.0148, -2.9530, -2.9570, -2.9791, -2.8353, -2.9703,
        -2.8818, -2.9727, -2.9421, -3.0348, -2.9650, -2.7791, -3.1132, -3.0183,
        -2.9469, -2.9785,  0.0000, -2.9045], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 4., 3., 2., 3., 4., 1., 4., 2., 1., 4., 2., 3., 2., 1., 3., 4., 2.,
        1., 2.], device='cuda:0')
labels tensor([0, 6, 6, 5, 3, 4, 3, 4, 7, 0, 6, 0, 0, 1, 2, 5, 5, 0, 6, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0269, -2.9184, -2.8406, -2.9537, -2.9148, -2.8695, -2.7917, -2.8769,
         0.0000, -3.0301, -2.8302, -3.0366, -3.0779, -2.8793,  0.0000, -3.0259,
        -3.0791, -3.0443, -2.8917, -3.1096], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 3., 3., 2., 1., 1., 1., 1., 1., 4., 3., 4., 4., 1., 1., 2., 2., 4.,

  1%|█                                                                                                        | 5/510 [00:03<05:10,  1.62it/s]
labels tensor([5, 0, 5, 5, 6, 5, 6, 0, 5, 2, 0, 6, 3, 7, 1, 0, 3, 2, 6, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8952, -5.9295, -2.8895, -2.8829, -2.7751, -2.8863, -2.7756, -5.9875,
        -2.8621, -3.0604, -2.8081, -2.8228, -2.7381,  0.0000,  0.0000, -5.9898,
        -2.8021, -3.0156, -2.8043, -2.8684], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 3., 4., 4., 3., 4., 3., 3., 4., 1., 3., 3., 2., 1., 1., 3., 2., 1.,
        3., 2.], device='cuda:0')
labels tensor([7, 3, 6, 3, 7, 6, 3, 0, 3, 3, 6, 0, 2, 7, 0, 5, 6, 5, 5, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9908, -2.8675, -3.0565, -2.9107, -2.9340, -2.9883, -2.8661, -2.7385,
        -2.9124, -2.8301, -3.0618, -2.7977,  0.0000, -3.0264, -3.0972, -3.0021,
        -3.0092, -2.9743, -2.9929, -3.0299], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 4., 3., 4., 2., 3., 4., 2., 4., 4., 3., 2., 1., 2., 2., 3., 3., 3.,
        3., 3.], device='cuda:0')
labels tensor([3, 6, 0, 3, 1, 5, 0, 1, 0, 0, 0, 0, 3, 3, 7, 7, 2, 6, 5, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9601, -2.8974, -2.9412, -2.8975, -3.0516, -2.8438, -2.9288, -2.8802,
        -2.9556, -2.9458, -2.9012, -2.9469, -2.9534, -2.9392, -3.0351, -3.0228,
         0.0000, -2.9848, -2.9507, -2.8912], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 5., 3., 2., 1., 5., 2., 5., 5., 5., 5., 3., 3., 1., 1., 1., 1.,
        1., 2.], device='cuda:0')
labels tensor([0, 6, 5, 6, 0, 3, 6, 4, 1, 3, 0, 6, 0, 5, 2, 1, 6, 5, 0, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9838, -2.8874, -2.9455, -2.8641, -2.9952, -2.8189, -2.8737,  0.0000,
        -2.8964, -2.8658, -2.9475, -2.8598, -2.9216, -2.9178,  0.0000, -2.9361,
        -2.8794, -2.9902, -3.0067, -2.9703], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 4., 2., 4., 5., 1., 4., 1., 1., 1., 5., 4., 5., 2., 1., 1., 4., 2.,
        5., 5.], device='cuda:0')
labels tensor([4, 0, 5, 2, 6, 0, 0, 0, 6, 5, 0, 7, 6, 3, 3, 4, 6, 4, 4, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0093, -2.9617, -2.7177,  0.0000, -2.9273, -3.0466, -2.9991, -3.0800,
        -2.9115, -3.1645, -3.0979,  0.0000, -2.9020, -2.8161, -2.6915, -2.9629,
        -2.8751, -2.9759, -2.9537,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 4., 1., 1., 3., 4., 4., 4., 3., 1., 4., 1., 3., 1., 1., 3., 3., 3.,
        3., 1.], device='cuda:0')
labels tensor([1, 7, 6, 6, 5, 6, 1, 5, 6, 5, 5, 5, 6, 1, 4, 6, 0, 6, 5, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9624,  0.0000, -2.9435, -2.9516, -2.9142, -2.9397, -3.0314, -2.9422,
        -2.9427, -2.9296, -2.9465, -2.9557, -2.9391, -2.9715, -3.0183, -2.9339,
         0.0000, -2.9389, -2.9129, -3.0874], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 1., 6., 6., 5., 6., 2., 5., 6., 5., 5., 5., 6., 2., 1., 6., 1., 6.,
        5., 1.], device='cuda:0')
labels tensor([3, 1, 0, 2, 2, 7, 4, 0, 1, 7, 6, 6, 5, 6, 4, 0, 6, 5, 0, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -3.0089, -2.7474, -2.7766, -3.0230, -2.9291, -2.8483, -2.7659,
        -3.0652, -2.9042, -3.1565, -3.1625, -2.9321, -3.0037, -2.8720, -2.8882,
        -3.0915, -2.9466, -2.8067, -2.8538], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 3., 1., 1., 2., 1., 3., 1., 2., 3., 3., 1., 3., 1., 3., 3., 1.,

  2%|█▊                                                                                                       | 9/510 [00:05<04:42,  1.78it/s]
labels tensor([4, 6, 0, 6, 5, 4, 1, 5, 6, 6, 1, 5, 0, 6, 1, 6, 7, 6, 7, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0474, -2.8666, -3.0298, -2.8776, -2.9607, -2.9682, -2.8706, -3.0897,
        -2.8698, -2.8789, -3.0339, -2.9849, -3.0785, -2.8716, -2.8960, -2.8709,
        -3.0354, -2.8765, -2.9581, -3.0956], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 6., 2., 6., 2., 1., 2., 2., 6., 6., 2., 2., 2., 6., 2., 6., 1., 6.,
        1., 2.], device='cuda:0')
labels tensor([3, 0, 4, 6, 6, 5, 5, 3, 6, 4, 0, 2, 0, 4, 2, 0, 0, 6, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0091, -3.0198, -2.9709, -2.8778, -2.8517, -2.6109, -3.0775, -2.9171,
        -2.8603, -2.9640, -2.9869, -2.9196, -3.0356, -3.0258, -2.8500, -2.9602,
        -2.9780, -2.8580, -3.0101, -2.8398], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 5., 2., 4., 4., 1., 1., 1., 4., 2., 5., 1., 5., 2., 1., 5., 5., 4.,
        5., 4.], device='cuda:0')
labels tensor([6, 0, 5, 6, 4, 5, 0, 1, 7, 5, 6, 3, 5, 0, 6, 4, 6, 0, 2, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0155, -2.8479, -2.8969, -3.0118, -2.9039, -2.8225, -2.8456, -3.0067,
         0.0000, -2.8347, -2.9472,  0.0000, -2.8738, -2.8321, -2.9698, -3.1702,
        -3.0109, -2.8335,  0.0000, -2.9900], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 3., 3., 4., 1., 3., 3., 1., 1., 3., 4., 1., 3., 3., 4., 1., 4., 3.,
        1., 1.], device='cuda:0')
labels tensor([6, 4, 6, 6, 6, 6, 4, 6, 5, 6, 0, 6, 6, 3, 5, 0, 6, 2, 6, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9617, -2.9853, -2.9633, -2.9684, -2.9334, -2.9497, -2.6084, -2.9270,
        -2.7865, -2.9561, -3.1242, -2.9679, -2.9280,  0.0000, -2.9106, -2.9485,
        -2.9361,  0.0000, -2.9597, -2.9721], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([11.,  1., 11., 11., 11., 11.,  1., 11.,  1., 11.,  1., 11., 11.,  1.,
         1.,  1., 11.,  1., 11., 11.], device='cuda:0')
labels tensor([6, 0, 7, 7, 5, 6, 2, 4, 5, 4, 4, 4, 6, 6, 3, 1, 6, 0, 2, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9011, -2.9654, -2.9896, -2.9074, -2.8453, -2.8462, -2.8454, -3.0703,
        -2.8909, -2.8065, -3.1185, -2.9154, -2.8557, -2.8794,  0.0000,  0.0000,
        -2.9039, -3.0616, -3.0033, -2.8795], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 1., 1., 1., 5., 1., 3., 1., 3., 3., 3., 5., 5., 1., 1., 5., 1.,


  4%|███▋                                                                                                    | 18/510 [00:09<03:41,  2.22it/s]
labels tensor([0, 7, 0, 4, 3, 5, 5, 4, 4, 0, 0, 6, 0, 6, 5, 7, 5, 5, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9433, -2.8915, -3.0251, -3.0118,  0.0000, -2.9039, -2.8937, -2.9831,
        -2.9188, -2.9272, -3.0285, -2.9120, -2.9216, -2.8980, -2.8923, -2.9096,
        -2.9058, -2.9050, -3.0071, -3.0470], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 5., 2., 1., 4., 4., 2., 2., 5., 5., 2., 5., 2., 4., 1., 4., 4.,
        5., 2.], device='cuda:0')
labels tensor([5, 7, 7, 0, 6, 6, 2, 0, 5, 5, 1, 6, 6, 2, 0, 0, 7, 5, 6, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9126, -3.0729, -3.1333, -3.0092, -2.9147, -2.9363, -2.8691, -3.1469,
        -2.8747, -2.8482,  0.0000, -2.8991, -2.8970, -2.9985, -3.0442, -3.0489,
        -2.9596, -2.8277, -2.8985,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 2., 3., 4., 4., 1., 3., 3., 3., 1., 4., 4., 1., 3., 3., 2., 3.,
        4., 1.], device='cuda:0')
labels tensor([6, 5, 0, 7, 1, 4, 7, 4, 1, 2, 0, 2, 7, 3, 5, 3, 3, 6, 0, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0891, -3.2327, -3.0544, -2.6950, -2.9011, -2.7662, -2.7995, -2.9667,
        -2.8050, -2.7992, -3.2332, -2.8624, -2.6864, -2.9561, -3.0995, -2.9394,
        -2.9703, -3.0343, -3.2424, -2.9827], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 2., 2., 1., 1., 2., 1., 1., 1., 2., 1., 2., 3., 1., 3., 3., 1.,
        2., 3.], device='cuda:0')
labels tensor([3, 5, 6, 5, 5, 1, 6, 6, 6, 6, 5, 3, 6, 5, 6, 5, 0, 5, 4, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9635, -2.9641, -2.9476, -2.9648, -2.9844,  0.0000, -2.9181, -2.9224,
        -2.9425, -2.9403, -2.9667, -3.1911, -2.9318, -2.9690, -2.9351, -2.9352,
         0.0000, -2.9809,  0.0000, -2.9787], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 7., 6., 7., 7., 1., 6., 6., 6., 6., 7., 1., 6., 7., 6., 7., 1., 7.,

  4%|████▍                                                                                                   | 22/510 [00:11<03:40,  2.21it/s]
labels tensor([3, 6, 3, 6, 5, 4, 6, 7, 0, 0, 0, 0, 1, 1, 7, 6, 1, 4, 7, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0747, -2.9345, -3.0855, -3.0197, -2.8809, -2.8965, -2.9874, -2.8698,
        -2.8803, -2.8491, -2.9198, -2.9319, -2.9206, -2.8306, -2.9455, -2.9943,
        -2.8223, -3.0563, -2.9011, -3.1261], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 3., 1., 3., 1., 1., 3., 2., 3., 3., 3., 3., 2., 2., 2., 3., 2., 1.,
        2., 1.], device='cuda:0')
labels tensor([0, 6, 4, 3, 6, 5, 4, 6, 2, 0, 5, 3, 0, 6, 3, 4, 4, 5, 6, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8018, -2.9368, -3.1666, -2.8337, -2.9427, -2.9516, -3.1354, -2.9537,
         0.0000, -2.7283, -2.9682, -2.9657, -2.9126, -2.9906, -2.8713, -3.0278,
        -3.1491, -2.9412, -2.9079, -2.9494], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 4., 3., 2., 4., 3., 3., 4., 1., 2., 3., 2., 2., 4., 2., 3., 3., 3.,
        4., 3.], device='cuda:0')
labels tensor([4, 2, 3, 5, 1, 0, 0, 6, 4, 6, 6, 5, 6, 5, 4, 5, 6, 0, 0, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9932, -3.2761,  0.0000, -2.8900,  0.0000, -2.8994, -3.0132, -2.9514,
        -2.9469, -2.9455, -2.9327, -2.9148, -2.9197, -2.8484, -2.9679, -2.9351,
        -2.9081, -2.8631, -2.9453, -2.9648], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 1., 1., 3., 1., 3., 3., 4., 2., 4., 4., 3., 4., 3., 2., 3., 4., 3.,
        3., 1.], device='cuda:0')
labels tensor([7, 7, 2, 0, 2, 6, 6, 5, 0, 1, 4, 2, 0, 6, 6, 6, 4, 0, 3, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8676, -3.0094, -3.0223, -2.8343, -3.0150, -3.0379, -3.0335,  0.0000,
        -2.7674,  0.0000, -3.5533, -2.9507, -2.8125, -3.0288, -2.9668, -3.0005,
        -2.9109, -2.9105,  0.0000, -3.0403], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 2., 3., 2., 5., 5., 1., 3., 1., 1., 2., 3., 5., 5., 5., 1., 3.,
        1., 5.], device='cuda:0')
labels tensor([6, 1, 5, 5, 7, 6, 7, 6, 6, 1, 7, 4, 6, 0, 4, 7, 4, 0, 0, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9945, -3.0601, -3.0496, -3.4492, -2.9588, -3.0104, -2.9104, -2.9541,
        -2.9807, -3.1101, -2.9173, -2.8304, -3.0012, -2.7803, -2.7466, -2.8461,
        -2.8343, -2.7937, -2.8267,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 1., 1., 1., 3., 4., 3., 4., 4., 1., 3., 2., 4., 2., 2., 3., 2., 2.,

  5%|█████▌                                                                                                  | 27/510 [00:13<03:34,  2.25it/s]
labels tensor([0, 4, 6, 1, 7, 6, 5, 3, 6, 6, 0, 6, 6, 6, 1, 7, 0, 2, 2, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8510, -3.0004, -2.9898, -2.8541, -2.7907, -2.9760,  0.0000,  0.0000,
        -3.0048, -2.9731, -2.8721, -2.9966, -2.9889, -2.9631, -2.8960, -3.1457,
        -2.9755, -2.9329, -2.9153, -2.7910], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 1., 6., 1., 1., 6., 1., 1., 6., 6., 2., 6., 6., 6., 1., 1., 2., 1.,
        1., 1.], device='cuda:0')
labels tensor([6, 1, 2, 3, 0, 4, 5, 7, 0, 0, 3, 4, 4, 4, 6, 5, 7, 5, 6, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9150,  0.0000,  0.0000, -2.9167, -2.9754, -3.0325, -2.9317, -2.9812,
        -2.9392, -2.9429, -2.9329, -2.9374, -3.0265, -2.9709, -2.9457, -2.9758,
        -2.9441, -2.9283, -2.9169, -2.8982], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 1., 1., 1., 3., 3., 2., 1., 3., 3., 1., 3., 3., 3., 2., 2., 1., 2.,
        2., 3.], device='cuda:0')
labels tensor([5, 1, 4, 0, 6, 5, 6, 3, 5, 5, 0, 2, 6, 0, 0, 7, 5, 0, 7, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9862,  0.0000,  0.0000, -3.0514, -2.8307, -2.9689, -2.9562,  0.0000,
        -2.9860, -3.0019, -3.0083,  0.0000, -2.9540, -3.0284, -3.0029, -2.9571,
        -2.9372, -2.9878, -3.0967, -2.9709], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 1., 4., 2., 5., 2., 1., 5., 5., 4., 1., 2., 4., 4., 1., 5., 4.,
        1., 5.], device='cuda:0')
labels tensor([5, 0, 6, 0, 0, 1, 1, 6, 3, 5, 5, 3, 6, 0, 0, 6, 4, 0, 1, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9657, -2.9102, -3.0142, -2.9488, -2.9143, -2.9970, -2.9536, -3.1674,
        -2.8787, -2.8959, -3.0378, -2.6903, -3.0588, -2.8699, -2.8954, -3.0996,
         0.0000, -2.8800, -2.9444, -2.9657], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 5., 3., 5., 5., 3., 3., 3., 1., 2., 2., 1., 3., 5., 5., 3., 1., 5.,

  6%|██████▎                                                                                                 | 31/510 [00:15<03:39,  2.18it/s]
labels tensor([4, 6, 5, 2, 5, 2, 6, 2, 5, 0, 5, 6, 1, 3, 5, 1, 1, 6, 4, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0878, -2.9798, -2.8462, -2.9476, -2.8659, -2.9575, -3.0363, -3.1016,
        -2.9044,  0.0000, -2.8424, -3.0700, -2.7649,  0.0000, -2.8559, -2.9066,
        -2.7881, -3.0411, -3.0185, -2.8502], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 3., 5., 2., 5., 2., 3., 2., 5., 1., 5., 3., 2., 1., 5., 2., 2., 3.,
        1., 5.], device='cuda:0')
labels tensor([0, 4, 1, 4, 0, 3, 5, 6, 1, 4, 6, 0, 7, 6, 1, 3, 6, 6, 4, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9173, -3.0170, -2.9316, -3.0482, -2.9138, -3.0347,  0.0000, -2.8917,
        -2.8662, -3.0474, -2.9188, -2.9246,  0.0000, -2.9959, -2.7961, -2.8592,
        -2.9173, -2.9540, -3.0241, -3.0341], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 4., 2., 4., 2., 1., 1., 4., 2., 4., 4., 2., 1., 4., 2., 1., 4., 4.,
        4., 4.], device='cuda:0')
labels tensor([6, 1, 2, 7, 6, 4, 5, 6, 1, 2, 6, 5, 6, 5, 7, 5, 7, 6, 6, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9017, -2.8826, -2.7670, -3.0446, -2.8815, -2.9369, -2.9919, -2.9937,
        -2.8501, -2.9135, -2.9725, -3.0480, -2.9812, -2.9758, -2.9682, -2.9404,
        -3.0042, -2.9900, -2.8864, -2.8730], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([6., 1., 1., 2., 6., 1., 3., 6., 1., 1., 6., 3., 6., 3., 2., 3., 2., 6.,
        6., 1.], device='cuda:0')
labels tensor([4, 5, 0, 5, 5, 0, 1, 5, 6, 5, 0, 0, 0, 0, 7, 3, 4, 0, 6, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9084, -2.9394, -3.0845, -2.9143, -2.9050, -3.0482, -2.6860, -2.8624,
        -2.8529, -2.9034, -3.0837, -3.0729, -3.0991, -3.0243,  0.0000,  0.0000,
        -3.0326, -3.0128, -2.9918, -2.7845], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 4., 6., 4., 4., 6., 1., 4., 1., 4., 6., 6., 6., 6., 1., 1., 1., 6.,
        1., 1.], device='cuda:0')
labels tensor([1, 2, 0, 2, 0, 7, 6, 7, 6, 0, 2, 6, 5, 1, 6, 0, 7, 6, 5, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0766, -2.9699, -2.9267, -2.9240, -2.9802, -2.8018, -2.9332, -2.9973,
        -2.9555, -2.9397, -2.9452, -2.9639, -2.9147, -3.0405, -2.9317, -2.9428,
        -2.8902, -2.9658, -2.9751, -2.9587], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 2., 3., 2., 3., 2., 4., 2., 4., 3., 2., 4., 2., 1., 4., 3., 2., 4.,

  7%|███████▎                                                                                                | 36/510 [00:17<03:32,  2.24it/s]
labels tensor([6, 2, 5, 1, 5, 0, 7, 7, 1, 3, 4, 0, 3, 6, 6, 5, 0, 6, 6, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0301,  0.0000, -2.8068, -3.0059, -3.0503, -2.9501, -2.8972, -2.9798,
        -2.9266, -2.9010,  0.0000, -2.9117, -2.9219, -3.0187, -2.9736, -2.8749,
        -2.9221, -3.0261, -3.0408, -3.0609], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 1., 2., 1., 2., 2., 2., 2., 1., 1., 1., 2., 1., 4., 4., 2., 2., 4.,
        4., 2.], device='cuda:0')
labels tensor([2, 2, 6, 5, 5, 7, 0, 4, 0, 6, 5, 5, 4, 1, 6, 5, 0, 0, 0, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.4676, -2.9209, -2.8243, -2.8869, -2.8544,  0.0000, -2.8966, -2.8845,
        -2.9253, -2.8215, -2.8828, -2.8704, -2.8950,  0.0000, -2.8436, -2.8869,
        -3.0032, -3.0568, -2.9682, -2.9974], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 2., 4., 4., 1., 5., 1., 5., 2., 4., 4., 1., 1., 2., 4., 5., 5.,
        5., 5.], device='cuda:0')
labels tensor([4, 6, 5, 6, 1, 0, 3, 1, 6, 4, 3, 1, 5, 6, 1, 1, 4, 0, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9058, -2.9585, -2.8841, -2.9796, -2.9629, -2.9183, -2.9699, -2.9954,
        -2.9150, -2.9220, -2.9145, -2.9532, -2.9134, -2.9355, -2.9648, -3.0096,
        -3.0230, -3.0459, -2.8715, -2.9392], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 4., 1., 4., 4., 2., 1., 4., 4., 2., 1., 4., 1., 4., 4., 4., 2., 2.,
        2., 4.], device='cuda:0')
labels tensor([2, 0, 3, 5, 6, 6, 7, 0, 1, 5, 0, 3, 0, 4, 6, 0, 6, 0, 0, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -3.8266, -2.9656, -3.4262, -2.8860, -2.9441,  0.0000, -3.6811,
         0.0000, -3.4709, -3.7577, -2.9813, -3.0675,  0.0000, -2.8953, -3.8215,
        -2.8770, -3.7992, -3.7529, -2.7913], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 6., 1., 2., 3., 3., 1., 6., 1., 2., 6., 1., 6., 1., 3., 6., 3., 6.,
        6., 2.], device='cuda:0')
labels tensor([4, 0, 2, 3, 1, 6, 3, 5, 4, 1, 6, 6, 0, 4, 5, 1, 4, 3, 1, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8705, -2.7890,  0.0000, -2.8794, -3.1181, -2.9035, -2.8236, -2.9216,
        -2.9487, -2.9863, -3.0337, -3.0054, -2.7788, -2.8790, -3.2660, -3.0615,
        -2.9208, -2.9320, -2.9364, -2.9885], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 1., 2., 3., 3., 2., 1., 3., 3., 3., 3., 1., 3., 1., 3., 3., 2.,

  8%|████████▏                                                                                               | 40/510 [00:19<03:41,  2.12it/s]
labels tensor([6, 0, 5, 1, 5, 0, 0, 6, 1, 0, 4, 5, 0, 1, 1, 6, 2, 6, 5, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0813, -2.9800, -2.9664, -2.9656, -2.9472, -2.9993, -2.9395, -3.0515,
        -2.9773, -2.9742,  0.0000, -2.9042, -2.9619, -2.9159, -2.9486, -3.0767,
         0.0000, -2.9753, -2.9192,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 4., 3., 3., 3., 4., 4., 3., 3., 4., 1., 3., 4., 3., 3., 3., 1., 3.,
        3., 1.], device='cuda:0')
labels tensor([6, 4, 5, 0, 6, 0, 1, 5, 6, 7, 1, 3, 6, 3, 6, 7, 7, 6, 0, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0156,  0.0000, -2.8883, -7.1334, -2.9655, -2.2726, -2.8954, -2.8884,
        -2.9310, -2.7615, -2.7425, -2.8386, -2.9393, -2.8556, -2.9074, -2.9351,
        -2.8778, -2.9489, -7.0504,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 1., 2., 5., 2., 1., 1., 5., 2., 1., 1., 5., 1., 5., 2., 2., 5.,
        2., 1.], device='cuda:0')
labels tensor([0, 6, 6, 4, 5, 2, 6, 7, 5, 1, 1, 5, 0, 3, 4, 6, 6, 4, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0311, -2.9656, -2.9649, -3.0424, -2.9677,  0.0000, -2.9736,  0.0000,
        -2.9846, -3.0742, -2.8426, -2.9070, -2.8975,  0.0000, -2.8635, -2.9755,
        -2.9759, -2.9075, -3.0807, -2.9528], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 5., 5., 2., 2., 1., 5., 1., 2., 1., 1., 2., 2., 1., 2., 5., 5., 2.,
        2., 5.], device='cuda:0')
labels tensor([1, 4, 5, 5, 3, 5, 5, 5, 6, 5, 1, 1, 1, 2, 4, 6, 0, 2, 5, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0042, -2.6936, -2.8975, -2.8913,  0.0000, -2.8952, -2.9471, -2.8961,
        -2.9031, -2.9008, -3.0769, -3.0522, -3.0001, -2.9578, -2.9585, -2.8897,
         0.0000, -3.1673, -2.9183, -2.8769], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 6., 6., 1., 6., 6., 6., 1., 6., 3., 3., 3., 1., 2., 1., 1., 1.,

  9%|█████████▏                                                                                              | 45/510 [00:22<03:43,  2.08it/s]
labels tensor([0, 2, 0, 5, 7, 5, 4, 5, 6, 1, 5, 6, 5, 0, 0, 0, 2, 6, 5, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8573, -2.8742, -2.8604, -2.8839,  0.0000, -2.8826, -3.2639, -2.8706,
        -2.9750,  0.0000, -2.8775, -3.1745, -2.8600, -2.8364, -2.8512, -2.9347,
        -2.9929, -3.0860, -2.9382, -3.0560], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 1., 4., 5., 1., 5., 1., 5., 2., 1., 5., 2., 5., 4., 4., 4., 1., 2.,
        5., 1.], device='cuda:0')
labels tensor([2, 5, 7, 0, 2, 6, 1, 6, 6, 6, 6, 7, 6, 1, 6, 6, 6, 1, 5, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0234, -3.0682, -3.1629, -2.9858, -2.8377, -2.9155, -2.8349, -2.9114,
        -2.9038, -2.9003, -2.9229, -2.9848, -2.9267, -2.8154, -2.9190, -2.9212,
        -2.9338, -2.8644, -2.9540, -3.0640], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 1., 1., 1., 8., 2., 8., 8., 8., 8., 1., 8., 2., 8., 8., 8., 2.,
        1., 1.], device='cuda:0')
labels tensor([0, 1, 6, 5, 2, 4, 4, 1, 3, 2, 5, 5, 6, 0, 5, 4, 5, 2, 6, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0440, -2.9693, -2.8074, -2.9900, -3.1858, -2.9267, -3.0733, -2.6263,
         0.0000, -3.0647, -3.0066, -2.9234, -2.8794, -2.9757, -2.9997, -3.0035,
        -2.9895, -3.1012, -2.8423, -2.8297], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 3., 4., 2., 2., 2., 1., 1., 2., 4., 4., 3., 1., 4., 2., 4., 2.,
        3., 3.], device='cuda:0')
labels tensor([5, 0, 4, 7, 0, 6, 4, 7, 2, 1, 0, 4, 5, 5, 5, 5, 0, 7, 0, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9809, -2.9010, -3.2209, -2.8663, -2.8954,  0.0000, -3.1027, -2.8859,
         0.0000,  0.0000, -2.8992, -3.1380, -2.9938, -3.0626, -2.9986, -3.0299,
        -2.8955, -2.9394, -2.8911, -2.8850], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 5., 2., 2., 5., 1., 2., 2., 1., 1., 5., 2., 4., 4., 4., 4., 5., 2.,

 10%|█████████▉                                                                                              | 49/510 [00:23<03:46,  2.03it/s]
labels tensor([6, 5, 4, 3, 6, 2, 4, 3, 1, 6, 2, 6, 6, 4, 5, 3, 0, 0, 0, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8199, -2.8041, -3.1630, -2.9817, -2.8889, -3.0100, -2.9990, -2.9738,
         0.0000, -2.7982, -2.9010, -2.7973, -2.9131, -3.0305, -2.9648, -3.0184,
        -3.0231, -3.0469, -2.9884, -2.9752], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 2., 2., 2., 4., 1., 2., 2., 1., 4., 1., 4., 4., 2., 2., 2., 2., 2.,
        2., 2.], device='cuda:0')
labels tensor([5, 0, 6, 6, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 6, 7, 6, 6, 7, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9235,  0.0000, -2.9565, -2.9528, -2.9295, -2.9441, -2.9827, -2.9620,
        -2.9158, -2.9008, -2.9675, -2.9648, -2.9590, -2.9211, -2.9585, -3.3931,
        -2.9633, -2.9685, -2.8207, -2.9544], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([ 5.,  1., 10., 10.,  5.,  5., 10., 10.,  5.,  5., 10., 10., 10.,  5.,
        10.,  1., 10., 10.,  1., 10.], device='cuda:0')
labels tensor([1, 0, 6, 0, 0, 6, 4, 6, 4, 0, 6, 7, 5, 0, 3, 0, 6, 0, 6, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -3.1107, -2.8966, -3.0701, -3.1173, -2.8587, -2.8562, -2.8654,
        -2.9046, -3.0240, -2.8754,  0.0000, -3.0376, -3.0733,  0.0000, -3.0936,
        -2.8924, -3.0832, -2.8816, -2.7607], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 6., 5., 6., 6., 5., 1., 5., 1., 6., 5., 1., 1., 6., 1., 6., 5., 6.,
        5., 1.], device='cuda:0')
labels tensor([4, 6, 0, 1, 4, 0, 6, 6, 5, 6, 6, 3, 6, 0, 6, 6, 1, 4, 1, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.1028, -2.9405, -3.1865, -2.7538, -2.8700, -3.0341, -2.9385, -2.9450,
         0.0000, -2.9193, -2.9304,  0.0000, -2.9271, -3.3107, -2.9233, -2.9181,
        -2.8413, -2.8176, -2.6856,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 7., 2., 2., 2., 2., 7., 7., 1., 7., 7., 1., 7., 2., 7., 7., 2., 2.,
        2., 1.], device='cuda:0')
labels tensor([4, 0, 7, 5, 0, 7, 5, 7, 4, 5, 1, 6, 6, 5, 2, 5, 3, 2, 1, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0400, -3.1245, -2.7954, -2.9459, -2.9491, -2.8923, -2.9631, -2.8305,
        -3.1022, -2.9458, -2.9694, -2.7894, -2.8566, -2.9554, -2.8815, -3.0092,
         0.0000, -3.0840, -3.0138, -2.9545], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 2., 2., 4., 2., 2., 4., 2., 1., 4., 1., 1., 1., 4., 1., 4., 1., 1.,

 11%|███████████                                                                                             | 54/510 [00:26<03:20,  2.27it/s]
labels tensor([0, 3, 0, 5, 0, 6, 0, 0, 3, 6, 4, 5, 6, 5, 4, 6, 5, 6, 5, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9335, -2.9056, -3.0010, -2.9620, -2.9826, -2.9952, -3.0173, -2.9779,
        -2.8552, -3.0162, -2.9178, -2.9820, -2.9740, -3.0278, -2.9292, -2.9540,
        -2.9096, -2.9395, -2.9414, -2.9381], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 5., 4., 5., 4., 5., 5., 1., 4., 1., 4., 4., 4., 1., 4., 4., 4.,
        4., 5.], device='cuda:0')
labels tensor([4, 5, 5, 2, 1, 5, 1, 5, 7, 7, 1, 6, 5, 4, 4, 7, 4, 2, 6, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8691, -3.0222, -3.0024, -2.9001, -2.9195, -3.0301, -2.9327, -3.0303,
        -2.9625, -2.9437, -2.9885, -2.6786, -3.0348, -2.9402, -2.9883, -2.9089,
        -2.9330, -2.9533, -2.9822, -2.9872], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 4., 4., 1., 3., 4., 3., 4., 2., 2., 3., 1., 4., 3., 3., 2., 3., 1.,
        1., 3.], device='cuda:0')
labels tensor([0, 6, 7, 2, 7, 6, 3, 5, 0, 5, 6, 0, 4, 2, 7, 5, 2, 0, 3, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9277, -3.0041, -2.9773, -3.0039, -2.9509, -3.0281, -2.8430, -2.9919,
        -2.9749, -2.9397, -2.8281, -2.8919,  0.0000, -3.1187, -2.9771, -2.9366,
        -2.9775, -2.9478, -2.8747,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 2., 2., 2., 2., 1., 2., 3., 2., 2., 3., 1., 2., 2., 2., 2., 3.,
        1., 1.], device='cuda:0')
labels tensor([0, 7, 4, 5, 5, 6, 2, 2, 3, 1, 5, 0, 0, 6, 0, 6, 4, 3, 2, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9895, -2.8914, -3.0064, -2.9752, -3.0705, -2.9921, -2.8958, -2.8854,
        -2.7752,  0.0000, -2.9580, -2.9570, -2.9506, -3.0536, -2.9997, -2.9052,
        -2.7843, -3.0418, -2.8863, -2.9919], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 1., 2., 2., 2., 2., 2., 1., 1., 2., 3., 3., 2., 3., 2., 1., 1.,

 11%|███████████▊                                                                                            | 58/510 [00:27<03:28,  2.17it/s]
labels tensor([7, 2, 0, 4, 1, 6, 5, 3, 0, 6, 5, 4, 6, 3, 7, 4, 2, 6, 5, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.3025, -2.8603, -2.8141, -2.8833,  0.0000, -2.8842, -2.9611, -4.5858,
        -3.3867, -2.9076, -2.9912, -2.8958, -2.9123, -3.0776, -3.0041, -2.8581,
        -2.7944, -2.8979, -2.8764, -2.8523], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 1., 2., 1., 4., 2., 1., 1., 4., 2., 2., 4., 1., 1., 2., 1., 4.,
        2., 4.], device='cuda:0')
labels tensor([1, 4, 0, 5, 1, 6, 1, 4, 6, 7, 5, 0, 7, 0, 4, 3, 0, 4, 5, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9264, -2.8716, -2.9645, -2.9202, -2.9628, -2.7090, -3.0220, -2.9880,
        -2.9665, -2.9596, -2.8666, -2.9364, -3.0460, -2.9927, -2.8209,  0.0000,
        -3.0449, -2.8810, -2.9913, -3.0508], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 3., 3., 2., 2., 1., 2., 3., 1., 2., 2., 3., 2., 3., 3., 1., 3., 3.,
        2., 2.], device='cuda:0')
labels tensor([5, 3, 6, 6, 5, 4, 2, 5, 3, 5, 0, 5, 3, 6, 6, 0, 0, 6, 4, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9542, -3.0507, -3.0286, -2.9872, -2.9400, -2.6978,  0.0000, -2.9616,
        -2.9370, -2.9156, -2.9114, -2.9501, -2.9017, -2.9992, -3.0003, -2.9346,
        -2.9356, -3.0126, -2.8253, -2.9997], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 2., 5., 5., 4., 1., 1., 4., 2., 4., 2., 4., 2., 5., 5., 2., 2., 5.,
        1., 5.], device='cuda:0')
labels tensor([7, 1, 2, 6, 0, 7, 6, 0, 7, 1, 1, 6, 7, 0, 5, 6, 0, 6, 0, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9919, -3.0014,  0.0000, -2.9551, -2.9501, -2.9889, -2.9396, -2.9161,
        -2.9776, -2.9060, -2.9198, -2.9388, -2.9265, -2.9562,  0.0000, -2.9380,
        -2.9472, -2.9808, -2.9502,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 1., 4., 4., 3., 4., 4., 3., 2., 2., 4., 3., 4., 1., 4., 4., 4.,
        4., 1.], device='cuda:0')
labels tensor([0, 6, 6, 5, 2, 2, 1, 2, 1, 2, 6, 1, 7, 6, 0, 6, 5, 6, 2, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8663, -2.9160, -2.9708, -3.0159, -3.0099, -2.9510, -2.8890, -2.9745,
        -2.9275, -2.9915, -2.9338, -2.9632,  0.0000, -2.8939, -2.9825, -2.9061,
        -3.1085, -2.9233, -2.9900, -3.0888], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 5., 5., 2., 4., 4., 2., 4., 2., 4., 5., 2., 1., 5., 1., 5., 2., 5.,

 12%|████████████▊                                                                                           | 63/510 [00:30<03:12,  2.32it/s]
labels tensor([6, 2, 4, 6, 2, 5, 0, 5, 0, 0, 6, 6, 1, 5, 0, 1, 6, 1, 4, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0142, -2.9139, -2.7802, -2.9153, -2.9559, -2.9504, -3.0728, -2.9087,
        -3.1362, -3.0642, -2.9587, -2.8975, -3.0264, -2.8583, -2.9813, -3.1236,
        -2.9512, -3.2191, -2.8516, -2.8142], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 1., 2., 4., 1., 2., 3., 2., 3., 3., 4., 4., 2., 2., 3., 2., 4., 2.,
        2., 2.], device='cuda:0')
labels tensor([1, 1, 7, 2, 0, 0, 0, 0, 5, 6, 6, 7, 5, 4, 7, 3, 5, 4, 3, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.7495, -2.8974, -2.9769,  0.0000, -2.9515, -2.9941, -2.9148, -2.8913,
        -2.9894, -2.8925, -2.9118, -2.9311, -2.9586, -3.1015, -2.9398, -2.9363,
        -3.0278, -2.9897, -2.8868, -2.9785], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 2., 1., 3., 3., 3., 3., 3., 1., 1., 2., 3., 1., 2., 1., 3., 1.,
        1., 3.], device='cuda:0')
labels tensor([6, 6, 5, 6, 6, 5, 6, 3, 1, 7, 6, 1, 1, 3, 4, 5, 5, 1, 7, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9177, -3.0032, -2.9023, -2.9402, -2.9172, -2.9335, -2.9298, -2.7034,
        -2.8509, -3.0566, -2.9209, -2.8100, -2.8157, -2.8284,  0.0000, -2.9460,
        -2.9136, -2.7733, -3.0681, -3.0294], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 5., 3., 5., 5., 3., 5., 1., 3., 2., 5., 3., 3., 1., 1., 3., 3., 3.,
        2., 2.], device='cuda:0')
labels tensor([6, 6, 1, 5, 7, 5, 6, 0, 3, 3, 6, 3, 4, 7, 6, 5, 5, 0, 4, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8906, -2.9223,  0.0000, -2.9452, -3.3354, -2.9366, -2.9125, -2.7389,
        -3.0805, -2.9513, -2.9000, -2.9475, -3.0760, -2.9939, -2.9346, -2.9460,
        -2.9791, -2.8579, -2.8640,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 4., 1., 3., 1., 3., 4., 1., 2., 2., 4., 2., 1., 1., 4., 3., 3., 1.,

 13%|█████████████▋                                                                                          | 67/510 [00:31<03:18,  2.23it/s]
labels tensor([5, 4, 5, 1, 6, 6, 6, 4, 6, 7, 0, 3, 2, 2, 1, 6, 2, 6, 6, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.7916, -3.1698, -2.9980, -2.9278, -2.9864, -2.9524, -2.9778, -2.8838,
        -2.9577,  0.0000,  0.0000,  0.0000, -2.9113, -2.9799, -2.9725, -2.9523,
        -2.9302, -2.9870, -2.9795, -3.0084], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 1., 1., 6., 6., 6., 1., 6., 1., 1., 1., 3., 3., 1., 6., 3., 6.,
        6., 3.], device='cuda:0')
labels tensor([5, 3, 4, 1, 7, 5, 6, 6, 7, 5, 2, 0, 3, 0, 6, 6, 0, 5, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.1345, -2.8607,  0.0000,  0.0000, -3.0534, -3.0470, -2.8552, -2.8713,
        -2.9821, -3.0975,  0.0000, -2.8868, -2.9926, -2.8740, -2.8582, -2.8879,
        -2.8301, -3.0131, -2.8987, -2.8985], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 1., 1., 1., 3., 4., 4., 1., 3., 1., 3., 1., 3., 4., 4., 3., 3.,
        3., 4.], device='cuda:0')
labels tensor([6, 5, 5, 6, 6, 4, 5, 1, 5, 6, 3, 5, 3, 2, 2, 5, 1, 6, 0, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8963, -2.8723, -3.2428, -2.8377, -2.7602, -3.1272, -3.2333, -2.7388,
        -3.2629, -2.8938, -3.0212, -3.1350, -3.0762, -3.0357, -2.7863, -3.2285,
        -2.8771, -2.8667,  0.0000, -2.7415], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 5., 5., 4., 4., 1., 5., 1., 5., 4., 1., 5., 1., 1., 1., 5., 1., 4.,
        1., 1.], device='cuda:0')
labels tensor([2, 6, 2, 0, 4, 5, 0, 5, 0, 5, 1, 5, 6, 1, 5, 7, 0, 1, 1, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.3966, -2.9971, -2.9913, -3.0606,  0.0000, -2.8548, -2.7963, -2.8944,
        -3.0256, -2.8675, -2.9549, -2.8818, -3.0169, -2.9695, -2.8585,  0.0000,
        -3.0603, -2.9605, -2.9718, -2.8771], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 1., 3., 1., 5., 3., 5., 3., 5., 3., 5., 1., 3., 5., 1., 3., 3.,
        3., 5.], device='cuda:0')
labels tensor([3, 0, 5, 0, 5, 0, 6, 0, 5, 0, 0, 6, 5, 6, 5, 7, 0, 0, 0, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -2.9251, -2.9077, -2.9397, -2.9240, -2.9481, -2.9617, -2.9173,
        -2.9227, -2.9348, -2.9286, -2.9454, -2.9426, -2.9171, -2.9511,  0.0000,
        -2.9381, -2.9228, -2.9586,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 8., 4., 8., 4., 8., 2., 8., 4., 8., 8., 2., 4., 2., 4., 1., 8., 8.,

 14%|██████████████▋                                                                                         | 72/510 [00:34<03:16,  2.23it/s]
labels tensor([1, 6, 4, 4, 5, 4, 3, 5, 0, 0, 4, 3, 0, 2, 1, 0, 6, 2, 7, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.7971, -2.9863, -2.9398, -2.9278, -2.8593, -2.9883, -2.9130, -2.8813,
        -3.0268, -3.0138, -2.9100, -2.9507, -3.0024, -2.9179, -2.9235, -2.9238,
        -3.1222, -2.8859,  0.0000, -2.9670], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 3., 3., 2., 3., 1., 2., 3., 3., 3., 1., 3., 1., 1., 3., 1., 1.,
        1., 2.], device='cuda:0')
labels tensor([0, 5, 6, 5, 2, 2, 6, 0, 2, 0, 6, 5, 4, 3, 3, 6, 0, 2, 6, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9374, -2.8723, -2.8417, -2.8993, -2.9168, -3.0026, -2.8701, -4.0732,
        -2.9774, -4.0465, -2.8699, -2.8991,  0.0000, -3.0886, -2.7785, -2.9237,
        -3.9364, -2.9452, -2.8570, -2.9350], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 5., 2., 3., 3., 5., 3., 3., 3., 5., 2., 1., 1., 1., 5., 3., 3.,
        5., 5.], device='cuda:0')
labels tensor([6, 4, 3, 7, 1, 6, 6, 2, 1, 5, 5, 6, 5, 0, 4, 0, 4, 6, 3, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0008, -2.9309, -2.6034,  0.0000, -3.0114, -3.1355, -3.1002, -3.0232,
        -3.0078, -3.0469, -3.0477, -3.0309, -3.1093, -2.7530, -2.9748, -2.7122,
        -2.9684, -3.0710, -2.9864, -2.7629], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 2., 1., 1., 1., 4., 4., 1., 1., 2., 2., 4., 2., 1., 2., 1., 2., 4.,
        1., 1.], device='cuda:0')
labels tensor([1, 6, 1, 1, 4, 5, 5, 6, 5, 0, 6, 2, 0, 3, 4, 5, 0, 3, 5, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0260, -2.8556, -3.0781, -3.1190, -2.9733, -2.8580, -2.9398, -2.8496,
        -2.8648, -2.9266, -2.7976,  0.0000, -2.9457, -3.3012, -2.8724, -2.8496,
        -2.8776, -2.9845, -2.9451, -3.0484], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 3., 3., 1., 4., 4., 2., 4., 2., 2., 1., 2., 1., 1., 4., 2., 1.,

 15%|███████████████▍                                                                                        | 76/510 [00:36<03:22,  2.15it/s]
labels tensor([6, 3, 1, 0, 4, 2, 3, 6, 4, 7, 5, 4, 0, 5, 4, 6, 6, 6, 6, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0125, -2.6428,  0.0000, -2.8693, -3.1149,  0.0000, -2.9038, -3.0330,
        -3.0954,  0.0000, -2.8657, -3.0380, -2.9938, -3.0233, -3.0339, -2.9907,
        -2.9944, -3.0117, -2.9911, -2.8006], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 1., 1., 3., 1., 1., 5., 3., 1., 2., 3., 1., 2., 3., 5., 5., 5.,
        5., 2.], device='cuda:0')
labels tensor([6, 0, 0, 5, 0, 0, 6, 0, 4, 6, 6, 6, 0, 6, 7, 6, 1, 4, 6, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9370, -2.8784, -2.8851,  0.0000, -2.9020, -2.8738, -2.9323, -2.8875,
        -2.9390, -2.9684, -2.9582, -2.9706, -2.8928, -2.9513,  0.0000, -2.9519,
         0.0000, -2.9026, -2.9389, -2.9421], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([7., 6., 6., 1., 6., 6., 7., 6., 1., 7., 7., 7., 6., 7., 1., 7., 1., 1.,
        7., 6.], device='cuda:0')
labels tensor([5, 6, 2, 6, 4, 5, 6, 0, 0, 0, 0, 1, 6, 6, 6, 1, 2, 6, 5, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0525, -2.9431, -2.9203, -2.9429, -3.1919, -3.0052, -2.8859, -2.8413,
        -2.8440, -2.8092, -2.8092, -3.0739, -2.9759, -2.9914, -2.9902, -3.1307,
        -2.7962, -2.9561, -3.0073, -2.8891], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 6., 1., 6., 1., 2., 6., 3., 3., 3., 3., 1., 6., 6., 6., 1., 1., 6.,
        2., 1.], device='cuda:0')
labels tensor([5, 7, 5, 4, 5, 0, 5, 2, 0, 3, 7, 3, 3, 1, 5, 5, 6, 6, 0, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9053, -3.1437, -2.9283,  0.0000, -2.9263, -3.1432, -2.9415, -3.0059,
        -3.0782, -2.9036, -3.1798, -2.9571, -2.8726,  0.0000, -2.9185, -2.9013,
        -2.5279, -3.1504, -3.0572, -3.0448], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 1., 5., 1., 5., 2., 5., 1., 2., 2., 1., 2., 2., 1., 5., 5., 1., 1.,
        2., 1.], device='cuda:0')
labels tensor([4, 6, 6, 6, 5, 0, 2, 7, 4, 6, 6, 5, 5, 5, 2, 1, 0, 5, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.1067, -2.9337, -2.9323, -2.9244, -3.0562, -3.1408, -2.8460,  0.0000,
        -2.6784, -2.9296, -2.9129, -3.0059, -2.9873, -3.0275, -2.7911,  0.0000,
        -3.1374, -2.9988, -2.8468, -2.9972], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 5., 5., 5., 4., 2., 1., 1., 1., 5., 5., 4., 4., 4., 1., 1., 2., 4.,

 16%|████████████████▎                                                                                       | 80/510 [00:37<03:17,  2.18it/s]
labels tensor([7, 0, 4, 3, 6, 0, 3, 0, 6, 6, 2, 7, 5, 2, 6, 3, 5, 7, 6, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0533, -2.8552,  0.0000, -2.8701, -2.9319, -3.0581, -3.0412, -3.0007,
        -2.9319, -2.8712, -2.9396, -2.9799, -2.9605, -2.9888, -2.8643, -2.9684,
        -3.0197, -3.0752, -2.8667, -2.9201], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 2., 1., 2., 5., 2., 2., 2., 5., 5., 1., 2., 1., 1., 5., 2., 1., 2.,
        5., 5.], device='cuda:0')
labels tensor([2, 6, 6, 6, 4, 6, 1, 0, 5, 6, 6, 0, 2, 6, 6, 6, 6, 0, 4, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9386, -2.9748, -2.9634, -2.9523, -2.8261, -2.9632,  0.0000, -2.8885,
        -3.0510, -2.9620, -2.9519, -2.7731, -3.0578, -2.9634, -2.9758, -2.9607,
        -2.9581, -2.7703, -3.0041, -2.8862], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 9., 9., 9., 1., 9., 1., 2., 1., 9., 9., 2., 1., 9., 9., 9., 9., 2.,
        1., 1.], device='cuda:0')
labels tensor([6, 6, 0, 3, 5, 5, 0, 1, 0, 1, 1, 3, 0, 6, 5, 2, 4, 0, 4, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8662, -2.9631, -2.8857, -2.9371, -2.8698, -2.8219, -2.9439, -2.8064,
        -3.0091, -2.9858, -2.8460, -2.9774, -3.0418, -2.9097, -3.0908,  0.0000,
        -3.2405, -2.9231, -2.9774, -3.0599], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 3., 4., 1., 2., 2., 4., 2., 4., 2., 2., 1., 4., 3., 2., 1., 1., 4.,

 17%|█████████████████▎                                                                                      | 85/510 [00:40<03:23,  2.09it/s]
labels tensor([0, 6, 6, 0, 0, 4, 5, 1, 0, 3, 0, 1, 6, 5, 6, 7, 4, 0, 1, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9315, -3.0594, -2.9808, -2.8969, -2.9360, -2.8528, -2.9511, -2.7893,
        -2.8801,  0.0000, -2.9356, -2.9721, -3.0078, -2.9433, -2.9573,  0.0000,
        -3.2038, -2.9003, -2.7623, -3.0130], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([5., 3., 3., 5., 5., 1., 2., 2., 5., 1., 5., 2., 3., 2., 3., 1., 1., 5.,
        2., 2.], device='cuda:0')
labels tensor([5, 4, 3, 7, 6, 5, 6, 0, 0, 5, 5, 5, 6, 5, 6, 3, 5, 7, 3, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0180,  0.0000, -2.7802, -3.0279, -3.1014, -3.0293, -3.0410, -2.6240,
        -2.7953, -3.0204, -3.0007, -3.0426, -3.0627, -3.0186, -2.9711, -2.8225,
        -3.0224, -2.9622, -2.9619,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([6., 1., 2., 1., 3., 6., 3., 1., 1., 6., 6., 6., 3., 6., 3., 2., 6., 1.,
        2., 1.], device='cuda:0')
labels tensor([6, 7, 1, 0, 5, 0, 7, 4, 6, 0, 5, 4, 5, 1, 1, 5, 5, 5, 0, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8707, -2.9100, -2.9563, -2.9458, -2.9474, -2.9071, -2.8018, -2.9280,
        -3.0065, -2.9309, -2.9347, -3.1421, -2.9660, -2.9957, -2.9555, -2.9680,
        -2.9852, -2.9627, -2.9548, -2.9594], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 3., 3., 5., 3., 1., 1., 1., 3., 5., 1., 5., 3., 3., 5., 5., 5.,
        3., 3.], device='cuda:0')
labels tensor([5, 6, 4, 6, 6, 7, 5, 3, 1, 0, 0, 6, 5, 5, 7, 2, 1, 6, 0, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8910, -2.9107,  0.0000, -2.9555, -2.9099, -2.8269, -2.9493,  0.0000,
        -3.0276, -3.0841, -3.0799, -2.9210, -2.9434, -2.9525, -2.7374,  0.0000,
        -2.9585, -2.9981, -3.1142, -3.0644], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 4., 1., 4., 4., 1., 3., 1., 1., 3., 3., 4., 3., 3., 1., 1., 1., 4.,
        3., 3.], device='cuda:0')
labels tensor([5, 7, 6, 5, 7, 0, 6, 1, 5, 6, 6, 6, 6, 7, 0, 4, 7, 0, 0, 2],
       device='cuda:0')

 17%|██████████████████▏                                                                                     | 89/510 [00:42<03:18,  2.12it/s]
mean_log_prob_pos tensor([-2.9419, -2.9828, -2.8402, -3.0441, -3.0277, -2.9832, -2.8221,  0.0000,
        -3.0275, -2.8612, -2.8709, -2.8447, -2.8178, -2.9762, -2.9476,  0.0000,
        -3.0092, -2.9328, -2.9725,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 3., 5., 2., 3., 3., 5., 1., 2., 5., 5., 5., 5., 3., 3., 1., 3., 3.,
        3., 1.], device='cuda:0')
labels tensor([3, 5, 3, 6, 4, 5, 2, 7, 4, 1, 6, 6, 5, 0, 4, 1, 1, 5, 7, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9522, -2.9867, -3.0051, -2.9290, -2.8917, -2.9849,  0.0000, -3.1230,
        -2.8401, -2.9125, -2.9118, -2.9580, -2.9426,  0.0000, -2.8703, -2.8481,
        -2.8622, -3.0373, -3.0376, -2.9013], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 3., 2., 2., 2., 3., 1., 1., 2., 2., 2., 2., 3., 1., 2., 2., 2., 3.,
        1., 2.], device='cuda:0')
labels tensor([1, 1, 2, 0, 4, 0, 6, 0, 2, 5, 1, 0, 6, 0, 3, 5, 0, 0, 6, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9118, -2.9076, -3.2429, -3.2726, -2.8861, -3.3179, -2.9076, -3.2637,
        -3.0103, -2.7855, -2.8669, -3.3167, -3.0284, -3.0688,  0.0000, -2.9102,
        -3.2707, -3.2689, -2.9809, -2.7283], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 2., 1., 6., 1., 6., 2., 6., 1., 1., 2., 6., 2., 6., 1., 1., 6., 6.,
        2., 1.], device='cuda:0')
labels tensor([5, 6, 7, 3, 6, 0, 6, 1, 7, 6, 6, 4, 5, 6, 5, 6, 6, 0, 6, 7],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.7703, -2.9539, -3.0274,  0.0000, -2.9500, -2.8219, -2.9609,  0.0000,
        -2.9771, -2.9507, -2.9542,  0.0000, -3.0787, -2.9552, -2.8929, -2.9604,
        -2.9450, -2.9248, -3.0411, -3.0195], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 8., 2., 1., 8., 1., 8., 1., 2., 8., 8., 1., 2., 8., 2., 8., 8., 1.,
        8., 2.], device='cuda:0')
labels tensor([0, 4, 2, 6, 5, 4, 1, 0, 5, 0, 6, 0, 7, 4, 6, 2, 3, 0, 4, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.2023, -3.0152, -2.8937, -2.8063, -2.8244, -2.9589,  0.0000, -3.0930,
        -2.9501, -3.1378, -3.0329, -3.0594,  0.0000, -3.0081, -2.8497, -2.9375,
         0.0000, -2.9901, -2.9543, -2.9068], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 3., 1., 2., 2., 3., 1., 4., 2., 4., 2., 4., 1., 3., 2., 1., 1., 4.,
        3., 2.], device='cuda:0')
labels tensor([5, 4, 3, 0, 0, 4, 6, 6, 6, 6, 4, 2, 6, 2, 2, 7, 6, 4, 6, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -3.0009,  0.0000, -2.7512, -2.8739, -2.9860, -2.8621, -2.8597,
        -2.8652, -2.8664, -2.9818, -5.5379, -2.8731, -3.0742, -5.7003,  0.0000,
        -2.8653, -2.9197, -2.8605, -2.8751], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 3., 1., 1., 1., 3., 7., 7., 7., 7., 3., 2., 7., 2., 2., 1., 7., 3.,

 18%|██████████████████▉                                                                                     | 93/510 [00:43<03:06,  2.24it/s]
labels tensor([0, 5, 3, 5, 3, 6, 1, 1, 4, 5, 0, 5, 0, 6, 3, 1, 0, 0, 7, 2],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9813, -2.8174, -2.9748, -2.7677, -2.9041, -2.7419, -2.9273, -3.1507,
         0.0000, -2.8237, -2.9670, -2.7946, -3.0129, -2.9297, -2.9984, -3.1494,
        -3.0582, -2.9774,  0.0000,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 3., 2., 3., 2., 1., 2., 2., 1., 3., 4., 3., 4., 1., 2., 2., 4., 4.,
        1., 1.], device='cuda:0')
labels tensor([6, 0, 2, 6, 5, 2, 3, 6, 1, 1, 1, 5, 1, 5, 3, 5, 6, 4, 2, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0567,  0.0000, -2.9175, -3.0867, -2.9726, -2.7983, -2.7383, -3.0388,
        -3.1272, -3.1379, -3.1180, -2.9533, -3.1156, -2.9560, -2.7718, -2.9154,
        -3.0183,  0.0000, -2.9028, -2.8239], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 2., 3., 3., 2., 2., 3., 3., 3., 3., 3., 3., 3., 2., 3., 3., 1.,
        2., 2.], device='cuda:0')
labels tensor([5, 4, 6, 5, 4, 1, 2, 0, 5, 0, 0, 6, 3, 6, 0, 0, 7, 0, 0, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9741, -2.9382, -2.9338, -2.9259, -2.8674,  0.0000,  0.0000, -3.0491,
        -2.8582, -3.0095, -2.9882, -2.9679,  0.0000, -2.9593, -2.9840, -3.0578,
         0.0000, -3.0966, -2.9104, -2.9397], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([2., 1., 3., 2., 1., 1., 1., 6., 2., 6., 6., 3., 1., 3., 6., 6., 1., 6.,
        6., 3.], device='cuda:0')
labels tensor([5, 5, 0, 0, 4, 0, 6, 5, 6, 6, 2, 1, 3, 6, 5, 7, 0, 6, 7, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9640, -3.0128, -2.9471, -3.0052, -2.9738, -3.0307, -2.8593, -3.0433,
        -2.9110, -2.9007,  0.0000,  0.0000,  0.0000, -2.9274, -2.9895, -3.0858,
        -3.0209, -2.8969, -2.9478, -2.6851], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 3., 3., 3., 1., 3., 4., 3., 4., 4., 1., 1., 1., 4., 3., 1., 3., 4.,
        1., 1.], device='cuda:0')
labels tensor([7, 0, 5, 6, 6, 0, 5, 4, 5, 2, 5, 7, 4, 5, 6, 6, 0, 5, 5, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.5674, -3.0668, -2.9795, -2.9515, -2.9445, -3.1803, -2.9803, -2.8872,
        -2.9904,  0.0000, -2.9725, -2.8386, -2.9189, -2.9723, -2.9820, -3.0988,
        -3.0842, -2.9727, -2.9825, -3.0576], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 2., 7., 3., 3., 2., 7., 1., 7., 1., 7., 1., 1., 7., 3., 3., 2., 7.,

 19%|███████████████████▊                                                                                    | 97/510 [00:45<03:01,  2.28it/s]
labels tensor([4, 0, 6, 5, 4, 6, 5, 0, 5, 6, 2, 6, 1, 5, 7, 7, 5, 6, 0, 1],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8845, -2.9677, -2.9801, -2.9204, -3.0505, -2.9335, -2.9075, -2.9712,
        -2.9016, -2.9157,  0.0000, -2.8890, -2.9523, -2.8821, -3.3011, -3.0458,
        -2.8700, -2.8957, -2.8692, -2.9053], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 2., 4., 4., 1., 4., 4., 2., 4., 4., 1., 4., 1., 4., 1., 1., 4., 4.,
        2., 1.], device='cuda:0')
labels tensor([6, 1, 6, 6, 3, 6, 7, 0, 0, 5, 6, 0, 7, 5, 1, 6, 7, 6, 6, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9355, -2.8873, -2.9347, -2.9424,  0.0000, -2.9378, -2.9665, -3.0309,
        -2.9608, -2.8252, -2.9504, -3.0248, -3.1146, -2.8657, -2.8035, -2.9324,
        -3.0890, -2.9450, -2.9319, -2.9927], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([7., 1., 7., 7., 1., 7., 2., 3., 3., 1., 7., 3., 2., 1., 1., 7., 2., 7.,
        7., 3.], device='cuda:0')
labels tensor([4, 3, 0, 0, 2, 6, 6, 0, 5, 0, 3, 1, 6, 5, 6, 0, 6, 0, 0, 0],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ 0.0000, -2.8637, -2.8871, -2.8840,  0.0000, -3.0296, -3.0246, -2.8822,
        -3.1488, -2.8785, -2.9565,  0.0000, -3.0345, -3.3092, -2.9940, -2.9033,
        -3.0657, -2.8751, -2.8951, -2.9021], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 1., 7., 7., 1., 4., 4., 7., 1., 7., 1., 1., 4., 1., 4., 7., 4., 7.,

 20%|████████████████████▌                                                                                  | 102/510 [00:47<03:08,  2.16it/s]
labels tensor([4, 5, 0, 6, 7, 6, 1, 6, 0, 0, 5, 6, 7, 6, 1, 3, 1, 4, 4, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9047, -2.9599, -2.9664, -2.9488, -3.0187, -2.9535, -2.9510, -3.0219,
        -2.9533, -2.9025, -2.9900, -2.9561, -2.8821, -2.9583, -2.8532,  0.0000,
        -2.8904, -2.9379, -2.9815, -2.9576], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 1., 2., 4., 1., 4., 2., 4., 2., 2., 1., 4., 1., 4., 2., 1., 2., 3.,
        3., 3.], device='cuda:0')
labels tensor([1, 5, 5, 1, 3, 2, 3, 6, 2, 5, 0, 2, 5, 3, 6, 5, 6, 2, 7, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.7582, -2.9659, -3.0031, -3.0620, -3.0000, -2.9183, -2.9809, -2.9078,
        -2.9717, -2.9899,  0.0000, -2.9568, -2.9610, -2.9716, -2.9641, -2.9556,
        -2.9485, -2.9073,  0.0000, -2.9622], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 4., 4., 1., 2., 3., 2., 3., 3., 4., 1., 3., 4., 2., 3., 4., 3., 3.,
        1., 3.], device='cuda:0')
labels tensor([6, 5, 4, 0, 7, 6, 3, 2, 3, 0, 6, 5, 2, 0, 0, 3, 2, 5, 6, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9538, -3.0761, -3.0707, -2.8989,  0.0000, -2.9563, -3.0188, -2.8464,
        -2.9482, -2.9940, -2.9146, -3.1155, -3.0341, -2.8857, -2.8232, -2.9572,
        -2.8435, -3.1236, -2.9820, -2.9144], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 2., 1., 3., 1., 3., 2., 2., 2., 3., 3., 2., 2., 3., 3., 2., 2., 2.,
        3., 1.], device='cuda:0')
labels tensor([4, 5, 4, 2, 6, 6, 0, 4, 0, 1, 7, 5, 0, 2, 7, 5, 5, 6, 4, 5],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9561, -2.9202, -2.8919, -2.8547, -2.9764, -2.9626, -2.8858, -2.9984,
        -2.7526,  0.0000, -2.8939, -2.9540, -2.9082, -3.1884, -3.1249, -2.9847,
        -2.9294, -2.9337, -2.9646, -2.9891], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([3., 4., 3., 1., 2., 2., 2., 3., 2., 1., 1., 4., 2., 1., 1., 4., 4., 2.,
        3., 4.], device='cuda:0')
labels tensor([5, 6, 6, 5, 2, 0, 5, 5, 0, 3, 6, 0, 6, 0, 6, 1, 0, 5, 7, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9198, -2.9961, -2.9826, -2.9416,  0.0000, -3.0019, -2.9290, -2.9290,
        -3.0312,  0.0000, -3.0057, -2.9707, -2.9590, -3.0303, -3.0146,  0.0000,
        -3.0830, -2.8702,  0.0000, -3.0112], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([4., 5., 5., 4., 1., 4., 4., 4., 4., 1., 5., 4., 5., 4., 5., 1., 4., 4.,

 21%|█████████████████████▍                                                                                 | 106/510 [00:49<03:15,  2.07it/s]
labels tensor([0, 6, 3, 1, 6, 0, 4, 0, 0, 2, 0, 4, 0, 6, 6, 0, 6, 5, 7, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-3.0437, -2.9795,  0.0000,  0.0000, -2.9615, -2.9535, -2.9549, -3.0185,
        -3.0458,  0.0000, -3.0241, -2.8799, -3.0350, -2.9558, -2.9581, -3.0458,
        -2.9650,  0.0000,  0.0000, -2.9845], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([6., 5., 1., 1., 5., 6., 1., 6., 6., 1., 6., 1., 6., 5., 5., 6., 5., 1.,
        1., 5.], device='cuda:0')
labels tensor([1, 3, 0, 6, 5, 3, 3, 6, 0, 3, 0, 0, 7, 1, 0, 0, 5, 6, 3, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8154, -2.9936, -3.4746, -2.9404, -2.8981, -2.9785, -2.9778, -3.0348,
        -2.9414, -2.9470, -3.4473, -3.4540,  0.0000, -2.6256, -3.4796, -3.4420,
        -2.8369, -3.0436, -2.9188,  0.0000], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 4., 5., 2., 1., 4., 4., 2., 5., 4., 5., 5., 1., 1., 5., 5., 1., 2.,
        4., 1.], device='cuda:0')
labels tensor([1, 0, 4, 5, 0, 7, 3, 7, 3, 6, 0, 5, 0, 0, 1, 6, 4, 4, 7, 3],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.8948, -2.8611, -2.9939, -3.1010, -2.9390, -2.9730, -3.1264, -2.8491,
        -3.0383, -2.9349, -2.9288, -2.9037, -2.9038, -2.9232, -3.0022, -2.7536,
        -3.0274, -3.0494, -2.9553, -2.9769], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([1., 4., 2., 1., 4., 2., 2., 2., 2., 1., 4., 1., 4., 4., 1., 1., 2., 2.,
        2., 2.], device='cuda:0')
labels tensor([0, 0, 5, 0, 7, 1, 5, 6, 0, 6, 6, 0, 1, 0, 4, 5, 6, 0, 6, 4],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([-2.9397, -2.9128, -3.0146, -2.9408,  0.0000, -2.9499, -2.9953, -2.9139,
        -2.9547, -2.9314, -2.9219, -2.9466, -2.8975, -2.9375, -2.9768, -2.9738,
        -2.9164, -2.9367, -2.9481, -3.0295], device='cuda:0',
       grad_fn=<DivBackward0>)
mask_pos_pairs tensor([6., 6., 2., 6., 1., 1., 2., 4., 6., 4., 4., 6., 1., 6., 1., 2., 4., 6.,
        4., 1.], device='cuda:0')
labels tensor([6, 6, 6, 2, 5, 3, 2, 5, 6, 3, 6, 1, 0, 6, 0, 6, 5, 4, 7, 6],
       device='cuda:0')
features torch.Size([20, 1, 768])
mean_log_prob_pos tensor([ -2.8770,  -2.9059,  -2.8922,  -2.8938,  -2.9060, -18.6723,  -2.6686,
         -2.9774,  -2.9209,      nan,  -2.9066,   0.0000,  -3.0493,  -2.8639,
         -2.7881,  -2.8844,  -2.8816,   0.0000,   0.0000,  -2.9013],
       device='cuda:0', grad_fn=<DivBackward0>)
mask_pos_pairs tensor([7., 7., 7., 1., 2., 1., 1., 2., 7., 1., 7., 1., 1., 7., 1., 7., 2., 1.,
        1., 7.], device='cuda:0')
 21%|█████████████████████▌                                                                                 | 107/510 [00:50<03:09,  2.13it/s]
Traceback (most recent call last):
  File "/home/lijunlin/lijunlin/ESCONV/main.py", line 328, in <module>
    global_step, tr_loss = train(args, logger, args.train_dataset, model, tokenizer)
  File "/home/lijunlin/lijunlin/ESCONV/BlenderEmotionalSupport.py", line 1272, in train
    outputs, _ = shared_steps(batch, model = model, tokenizer= tokenizer,args= args, phase = "train")
  File "/home/lijunlin/lijunlin/ESCONV/BlenderEmotionalSupport.py", line 2269, in shared_steps
    outputs = model(input_ids, attention_mask = input_ids.ne(tokenizer.pad_token_id),
  File "/home/lijunlin/miniconda3/envs/empchat/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/lijunlin/miniconda3/envs/empchat/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/lijunlin/lijunlin/ESCONV/src/transformers/models/bart/modeling_bart.py", line 1986, in forward
    contrast_loss = contrast_loss_fc(features = features, labels = decoder_strategy_ids)
  File "/home/lijunlin/miniconda3/envs/empchat/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1518, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/lijunlin/miniconda3/envs/empchat/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1527, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/lijunlin/lijunlin/ESCONV/src/transformers/models/bart/modules/modules.py", line 781, in forward
    assert 1 == 2
AssertionError